# Generated SBE (Simple Binary Encoding) message codec
# Code generated by SBE. DO NOT EDIT.

export ChunkHeaderMessage, ChunkHeaderMessageDecoder, ChunkHeaderMessageEncoder
abstract type ChunkHeaderMessage{T} end

struct ChunkHeaderMessageDecoder{T<:AbstractArray{UInt8}} <: ChunkHeaderMessage{T}
    buffer::T
    offset::Int64
    position_ptr::Base.RefValue{Int64}
    acting_block_length::UInt16
    acting_version::UInt16
    function ChunkHeaderMessageDecoder(buffer::T, offset::Integer, position_ptr::Ref{Int64},
        acting_block_length::Integer, acting_version::Integer) where {T}
        position_ptr[] = offset + acting_block_length
        new{T}(buffer, offset, position_ptr, acting_block_length, acting_version)
    end
end

struct ChunkHeaderMessageEncoder{T<:AbstractArray{UInt8}} <: ChunkHeaderMessage{T}
    buffer::T
    offset::Int64
    position_ptr::Base.RefValue{Int64}
    function ChunkHeaderMessageEncoder(buffer::T, offset::Integer, position_ptr::Ref{Int64}) where {T}
        position_ptr[] = offset + 72
        new{T}(buffer, offset, position_ptr)
    end
end

@inline function ChunkHeaderMessageDecoder(buffer::AbstractArray, offset::Integer=0;
    position_ptr::Base.RefValue{Int64}=Ref(0),
    header::MessageHeader=MessageHeader(buffer, offset))
    if templateId(header) != UInt16(0x1e) || schemaId(header) != UInt16(0x1)
        error("Template id or schema id mismatch")
    end
    ChunkHeaderMessageDecoder(buffer, offset + sbe_encoded_length(header), position_ptr,
        blockLength(header), version(header))
end
@inline function ChunkHeaderMessageEncoder(buffer::AbstractArray, offset::Integer=0;
    position_ptr::Base.RefValue{Int64}=Ref(0),
    header::MessageHeader=MessageHeader(buffer, offset))
    blockLength!(header, UInt16(0x48))
    templateId!(header, UInt16(0x1e))
    schemaId!(header, UInt16(0x1))
    version!(header, UInt16(0x0))
    ChunkHeaderMessageEncoder(buffer, offset + sbe_encoded_length(header), position_ptr)
end
sbe_buffer(m::ChunkHeaderMessage) = m.buffer
sbe_offset(m::ChunkHeaderMessage) = m.offset
sbe_position_ptr(m::ChunkHeaderMessage) = m.position_ptr
sbe_position(m::ChunkHeaderMessage) = m.position_ptr[]
sbe_position!(m::ChunkHeaderMessage, position) = m.position_ptr[] = position
sbe_block_length(::ChunkHeaderMessage) = UInt16(0x48)
sbe_block_length(::Type{<:ChunkHeaderMessage}) = UInt16(0x48)
sbe_template_id(::ChunkHeaderMessage) = UInt16(0x1e)
sbe_template_id(::Type{<:ChunkHeaderMessage})  = UInt16(0x1e)
sbe_schema_id(::ChunkHeaderMessage) = UInt16(0x1)
sbe_schema_id(::Type{<:ChunkHeaderMessage})  = UInt16(0x1)
sbe_schema_version(::ChunkHeaderMessage) = UInt16(0x0)
sbe_schema_version(::Type{<:ChunkHeaderMessage})  = UInt16(0x0)
sbe_semantic_type(::ChunkHeaderMessage) = ""
sbe_semantic_version(::ChunkHeaderMessage) = ""
sbe_acting_block_length(m::ChunkHeaderMessageDecoder) = m.acting_block_length
sbe_acting_block_length(::ChunkHeaderMessageEncoder) = UInt16(0x48)
sbe_acting_version(m::ChunkHeaderMessageDecoder) = m.acting_version
sbe_acting_version(::ChunkHeaderMessageEncoder) = UInt16(0x0)
sbe_rewind!(m::ChunkHeaderMessage) = sbe_position!(m, m.offset + sbe_acting_block_length(m))
sbe_encoded_length(m::ChunkHeaderMessage) = sbe_position(m) - m.offset
@inline function sbe_decoded_length(m::ChunkHeaderMessage)
    skipper = ChunkHeaderMessageDecoder(sbe_buffer(m), sbe_offset(m), Ref(0),
        sbe_acting_block_length(m), sbe_acting_version(m))
    sbe_skip!(skipper)
    sbe_encoded_length(skipper)
end

function header_meta_attribute(::ChunkHeaderMessage, meta_attribute)
    meta_attribute === :presence && return Symbol("required")
    return Symbol("")
end
header_id(::ChunkHeaderMessage) = UInt16(0x1)
header_since_version(::ChunkHeaderMessage) = UInt16(0x0)
header_in_acting_version(m::ChunkHeaderMessage) = sbe_acting_version(m) >= UInt16(0x0)
header_encoding_offset(::ChunkHeaderMessage) = 0
header(m::ChunkHeaderMessage) = SpidersMessageHeader(m.buffer, m.offset + 0, sbe_acting_version(m))

function length_meta_attribute(::ChunkHeaderMessage, meta_attribute)
    meta_attribute === :presence && return Symbol("required")
    return Symbol("")
end
length_id(::ChunkHeaderMessage) = UInt16(0x2)
length_since_version(::ChunkHeaderMessage) = UInt16(0x0)
length_in_acting_version(m::ChunkHeaderMessage) = sbe_acting_version(m) >= UInt16(0x0)
length_encoding_offset(::ChunkHeaderMessage) = 64
length_null_value(::ChunkHeaderMessage) = Int64(-9223372036854775808)
length_min_value(::ChunkHeaderMessage) = Int64(-9223372036854775807)
length_max_value(::ChunkHeaderMessage) = Int64(9223372036854775807)
length_encoding_length(::ChunkHeaderMessage) = 8

@inline function length(m::ChunkHeaderMessageDecoder)
    return decode_le(Int64, m.buffer, m.offset + 64)
end
@inline length!(m::ChunkHeaderMessageEncoder, value) = encode_le(Int64, m.buffer, m.offset + 64, value)

function metadata_meta_attribute(::ChunkHeaderMessage, meta_attribute)
    meta_attribute === :presence && return Symbol("required")
    return Symbol("")
end

metadata_character_encoding(::ChunkHeaderMessage) = "null"
metadata_in_acting_version(m::ChunkHeaderMessage) = sbe_acting_version(m) >= 0
metadata_id(::ChunkHeaderMessage) = 10
metadata_header_length(::ChunkHeaderMessage) = 4

@inline function metadata_length(m::ChunkHeaderMessage)
    return decode_le(UInt32, m.buffer, sbe_position(m))
end

@inline function metadata_length!(m::ChunkHeaderMessageEncoder, n)
    if !checkbounds(Bool, m.buffer, sbe_position(m) + 4 + n)
        error("buffer too short for data length")
    elseif n > 1073741824
        error("data length too large for length type")
    end
    return encode_le(UInt32, m.buffer, sbe_position(m), n)
end

@inline function skip_metadata!(m::ChunkHeaderMessage)
    len = metadata_length(m)
    pos = sbe_position(m) + 4
    sbe_position!(m, pos + len)
    return len
end

@inline function metadata(m::ChunkHeaderMessageDecoder)
    len = metadata_length(m)
    pos = sbe_position(m) + 4
    sbe_position!(m, pos + len)
    return view(m.buffer, pos+1:pos+len)
end

@inline function metadata!(m::ChunkHeaderMessageEncoder; length::Int64)
    metadata_length!(m, length)
    pos = sbe_position(m) + 4
    sbe_position!(m, pos + length)
    return view(m.buffer, pos+1:pos+length)
end

@inline function metadata!(m::ChunkHeaderMessageEncoder, src)
    len = Base.length(src)
    metadata_length!(m, len)
    pos = sbe_position(m) + 4
    sbe_position!(m, pos + len)
    dest = view(m.buffer, pos+1:pos+len)
    copyto!(dest, src)
end

function show(io::IO, m::ChunkHeaderMessage{T}) where {T}
    println(io, "ChunkHeaderMessage view over a type $T")
    println(io, "SbeBlockLength: ", sbe_block_length(m))
    println(io, "SbeTemplateId:  ", sbe_template_id(m))
    println(io, "SbeSchemaId:    ", sbe_schema_id(m))
    println(io, "SbeSchemaVersion: ", sbe_schema_version(m))

    writer = ChunkHeaderMessageDecoder(sbe_buffer(m), sbe_offset(m), Ref(0),
        sbe_block_length(m), sbe_schema_version(m))
    print(io, "header: ")
    show(io, header(writer))

    println(io)
    print(io, "length: ")
    print(io, length(writer))

    println(io)
    print(io, "metadata: ")
    print(io, skip_metadata!(writer))
    print(io, " bytes of raw data")

    nothing
end

@inline function sbe_skip!(m::ChunkHeaderMessage)
    sbe_rewind!(m)
    skip_metadata!(m)
    return
end
