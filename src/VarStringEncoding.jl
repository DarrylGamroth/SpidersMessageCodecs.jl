# Generated SBE (Simple Binary Encoding) message codec
# Code generated by SBE. DO NOT EDIT.

export VarStringEncoding, VarStringEncodingDecoder, VarStringEncodingEncoder
struct VarStringEncoding{T<:AbstractArray{UInt8}}
    buffer::T
    offset::Int64
    acting_version::UInt16
    function VarStringEncoding(buffer::T, offset::Integer=0, acting_version::Integer=0) where {T}
        new{T}(buffer, offset, acting_version)
    end
end
const VarStringEncodingDecoder = VarStringEncoding
const VarStringEncodingEncoder = VarStringEncoding

sbe_buffer(m::VarStringEncoding) = m.buffer
sbe_offset(m::VarStringEncoding) = m.offset
sbe_acting_version(m::VarStringEncoding) = m.acting_version
sbe_encoded_length(::VarStringEncoding) = typemax(UInt16)
sbe_encoded_length(::Type{<:VarStringEncoding}) = typemax(UInt16)
sbe_schema_id(::VarStringEncoding) = UInt16(0x1)
sbe_schema_id(::Type{<:VarStringEncoding}) = UInt16(0x1)
sbe_schema_version(::VarStringEncoding) = UInt16(0x0)
sbe_schema_version(::Type{<:VarStringEncoding}) = UInt16(0x0)

function Base.convert(::Type{<:AbstractArray{UInt8}}, m::VarStringEncodingEncoder)
    return view(m.buffer, m.offset+1:m.offset+sbe_encoded_length(m))
end

function length_meta_attribute(::VarStringEncoding, meta_attribute)
    meta_attribute === :presence && return Symbol("required")
    return Symbol("")
end
length_id(::VarStringEncoding) = UInt16(0xffffffffffffffff)
length_since_version(::VarStringEncoding) = UInt16(0x0)
length_in_acting_version(m::VarStringEncoding) = sbe_acting_version(m) >= UInt16(0x0)
length_encoding_offset(::VarStringEncoding) = 0
length_null_value(::VarStringEncoding) = UInt32(0xffffffff)
length_min_value(::VarStringEncoding) = UInt32(0x0)
length_max_value(::VarStringEncoding) = UInt32(0x40000000)
length_encoding_length(::VarStringEncoding) = 4

@inline function length(m::VarStringEncodingDecoder)
    return decode_le(UInt32, m.buffer, m.offset + 0)
end
@inline length!(m::VarStringEncodingEncoder, value) = encode_le(UInt32, m.buffer, m.offset + 0, value)

function varData_meta_attribute(::VarStringEncoding, meta_attribute)
    meta_attribute === :presence && return Symbol("required")
    return Symbol("")
end
varData_id(::VarStringEncoding) = UInt16(0xffffffffffffffff)
varData_since_version(::VarStringEncoding) = UInt16(0x0)
varData_in_acting_version(m::VarStringEncoding) = sbe_acting_version(m) >= UInt16(0x0)
varData_encoding_offset(::VarStringEncoding) = 4
varData_null_value(::VarStringEncoding) = UInt8(0xff)
varData_min_value(::VarStringEncoding) = UInt8(0x0)
varData_max_value(::VarStringEncoding) = UInt8(0xfe)
varData_encoding_length(::VarStringEncoding) = -1

function show(io::IO, writer::VarStringEncoding{T}) where {T}
    println(io, "VarStringEncoding view over a type $T")
    print(io, "length: ")
    print(io, length(writer))

end
