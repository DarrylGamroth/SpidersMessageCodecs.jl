# Generated SBE (Simple Binary Encoding) message codec
# Code generated by SBE. DO NOT EDIT.

export GroupSizeEncoding, GroupSizeEncodingDecoder, GroupSizeEncodingEncoder
struct GroupSizeEncoding{T<:AbstractArray{UInt8}}
    buffer::T
    offset::Int64
    acting_version::UInt16
    function GroupSizeEncoding(buffer::T, offset::Integer=0, acting_version::Integer=0) where {T}
        new{T}(buffer, offset, acting_version)
    end
end
const GroupSizeEncodingDecoder = GroupSizeEncoding
const GroupSizeEncodingEncoder = GroupSizeEncoding

sbe_buffer(m::GroupSizeEncoding) = m.buffer
sbe_offset(m::GroupSizeEncoding) = m.offset
sbe_acting_version(m::GroupSizeEncoding) = m.acting_version
sbe_encoded_length(::GroupSizeEncoding) = UInt16(0x4)
sbe_encoded_length(::Type{<:GroupSizeEncoding}) = UInt16(0x4)
sbe_schema_id(::GroupSizeEncoding) = UInt16(0x1)
sbe_schema_id(::Type{<:GroupSizeEncoding}) = UInt16(0x1)
sbe_schema_version(::GroupSizeEncoding) = UInt16(0x0)
sbe_schema_version(::Type{<:GroupSizeEncoding}) = UInt16(0x0)

function Base.convert(::Type{<:AbstractArray{UInt8}}, m::GroupSizeEncodingEncoder)
    return view(m.buffer, m.offset+1:m.offset+sbe_encoded_length(m))
end

function blockLength_meta_attribute(::GroupSizeEncoding, meta_attribute)
    meta_attribute === :presence && return Symbol("required")
    return Symbol("")
end
blockLength_id(::GroupSizeEncoding) = UInt16(0xffffffffffffffff)
blockLength_since_version(::GroupSizeEncoding) = UInt16(0x0)
blockLength_in_acting_version(m::GroupSizeEncoding) = sbe_acting_version(m) >= UInt16(0x0)
blockLength_encoding_offset(::GroupSizeEncoding) = 0
blockLength_null_value(::GroupSizeEncoding) = UInt16(0xffff)
blockLength_min_value(::GroupSizeEncoding) = UInt16(0x0)
blockLength_max_value(::GroupSizeEncoding) = UInt16(0xfffe)
blockLength_encoding_length(::GroupSizeEncoding) = 2

@inline function blockLength(m::GroupSizeEncodingDecoder)
    return decode_le(UInt16, m.buffer, m.offset + 0)
end
@inline blockLength!(m::GroupSizeEncodingEncoder, value) = encode_le(UInt16, m.buffer, m.offset + 0, value)

function numInGroup_meta_attribute(::GroupSizeEncoding, meta_attribute)
    meta_attribute === :presence && return Symbol("required")
    return Symbol("")
end
numInGroup_id(::GroupSizeEncoding) = UInt16(0xffffffffffffffff)
numInGroup_since_version(::GroupSizeEncoding) = UInt16(0x0)
numInGroup_in_acting_version(m::GroupSizeEncoding) = sbe_acting_version(m) >= UInt16(0x0)
numInGroup_encoding_offset(::GroupSizeEncoding) = 2
numInGroup_null_value(::GroupSizeEncoding) = UInt16(0xffff)
numInGroup_min_value(::GroupSizeEncoding) = UInt16(0x0)
numInGroup_max_value(::GroupSizeEncoding) = UInt16(0xfffe)
numInGroup_encoding_length(::GroupSizeEncoding) = 2

@inline function numInGroup(m::GroupSizeEncodingDecoder)
    return decode_le(UInt16, m.buffer, m.offset + 2)
end
@inline numInGroup!(m::GroupSizeEncodingEncoder, value) = encode_le(UInt16, m.buffer, m.offset + 2, value)

function show(io::IO, writer::GroupSizeEncoding{T}) where {T}
    println(io, "GroupSizeEncoding view over a type $T")
    print(io, "blockLength: ")
    print(io, blockLength(writer))

    println(io)
    print(io, "numInGroup: ")
    print(io, numInGroup(writer))

end
