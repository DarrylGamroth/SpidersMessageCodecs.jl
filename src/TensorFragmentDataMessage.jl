# Generated SBE (Simple Binary Encoding) message codec
# Code generated by SBE. DO NOT EDIT.

export TensorFragmentDataMessage, TensorFragmentDataMessageDecoder, TensorFragmentDataMessageEncoder
abstract type TensorFragmentDataMessage{T} end

struct TensorFragmentDataMessageDecoder{T<:AbstractArray{UInt8}} <: TensorFragmentDataMessage{T}
    buffer::T
    offset::Int64
    position_ptr::Base.RefValue{Int64}
    acting_block_length::UInt16
    acting_version::UInt16
    function TensorFragmentDataMessageDecoder(buffer::T, offset::Integer, position_ptr::Ref{Int64},
        acting_block_length::Integer, acting_version::Integer) where {T}
        position_ptr[] = offset + acting_block_length
        new{T}(buffer, offset, position_ptr, acting_block_length, acting_version)
    end
end

struct TensorFragmentDataMessageEncoder{T<:AbstractArray{UInt8}} <: TensorFragmentDataMessage{T}
    buffer::T
    offset::Int64
    position_ptr::Base.RefValue{Int64}
    function TensorFragmentDataMessageEncoder(buffer::T, offset::Integer, position_ptr::Ref{Int64}) where {T}
        position_ptr[] = offset + 72
        new{T}(buffer, offset, position_ptr)
    end
end

@inline function TensorFragmentDataMessageDecoder(buffer::AbstractArray, offset::Integer=0;
    position_ptr::Base.RefValue{Int64}=Ref(0),
    header::MessageHeader=MessageHeader(buffer, offset))
    if templateId(header) != UInt16(0xf) || schemaId(header) != UInt16(0x1)
        error("Template id or schema id mismatch")
    end
    TensorFragmentDataMessageDecoder(buffer, offset + sbe_encoded_length(header), position_ptr,
        blockLength(header), version(header))
end
@inline function TensorFragmentDataMessageEncoder(buffer::AbstractArray, offset::Integer=0;
    position_ptr::Base.RefValue{Int64}=Ref(0),
    header::MessageHeader=MessageHeader(buffer, offset))
    blockLength!(header, UInt16(0x48))
    templateId!(header, UInt16(0xf))
    schemaId!(header, UInt16(0x1))
    version!(header, UInt16(0x0))
    TensorFragmentDataMessageEncoder(buffer, offset + sbe_encoded_length(header), position_ptr)
end
sbe_buffer(m::TensorFragmentDataMessage) = m.buffer
sbe_offset(m::TensorFragmentDataMessage) = m.offset
sbe_position_ptr(m::TensorFragmentDataMessage) = m.position_ptr
sbe_position(m::TensorFragmentDataMessage) = m.position_ptr[]
sbe_position!(m::TensorFragmentDataMessage, position) = m.position_ptr[] = position
sbe_block_length(::TensorFragmentDataMessage) = UInt16(0x48)
sbe_block_length(::Type{<:TensorFragmentDataMessage}) = UInt16(0x48)
sbe_template_id(::TensorFragmentDataMessage) = UInt16(0xf)
sbe_template_id(::Type{<:TensorFragmentDataMessage})  = UInt16(0xf)
sbe_schema_id(::TensorFragmentDataMessage) = UInt16(0x1)
sbe_schema_id(::Type{<:TensorFragmentDataMessage})  = UInt16(0x1)
sbe_schema_version(::TensorFragmentDataMessage) = UInt16(0x0)
sbe_schema_version(::Type{<:TensorFragmentDataMessage})  = UInt16(0x0)
sbe_semantic_type(::TensorFragmentDataMessage) = ""
sbe_semantic_version(::TensorFragmentDataMessage) = ""
sbe_acting_block_length(m::TensorFragmentDataMessageDecoder) = m.acting_block_length
sbe_acting_block_length(::TensorFragmentDataMessageEncoder) = UInt16(0x48)
sbe_acting_version(m::TensorFragmentDataMessageDecoder) = m.acting_version
sbe_acting_version(::TensorFragmentDataMessageEncoder) = UInt16(0x0)
sbe_rewind!(m::TensorFragmentDataMessage) = sbe_position!(m, m.offset + sbe_acting_block_length(m))
sbe_encoded_length(m::TensorFragmentDataMessage) = sbe_position(m) - m.offset
@inline function sbe_decoded_length(m::TensorFragmentDataMessage)
    skipper = TensorFragmentDataMessageDecoder(sbe_buffer(m), sbe_offset(m), Ref(0),
        sbe_acting_block_length(m), sbe_acting_version(m))
    sbe_skip!(skipper)
    sbe_encoded_length(skipper)
end

function header_meta_attribute(::TensorFragmentDataMessage, meta_attribute)
    meta_attribute === :presence && return Symbol("required")
    return Symbol("")
end
header_id(::TensorFragmentDataMessage) = UInt16(0x1)
header_since_version(::TensorFragmentDataMessage) = UInt16(0x0)
header_in_acting_version(m::TensorFragmentDataMessage) = sbe_acting_version(m) >= UInt16(0x0)
header_encoding_offset(::TensorFragmentDataMessage) = 0
header(m::TensorFragmentDataMessage) = SpidersMessageHeader(m.buffer, m.offset + 0, sbe_acting_version(m))

function offset_meta_attribute(::TensorFragmentDataMessage, meta_attribute)
    meta_attribute === :presence && return Symbol("required")
    return Symbol("")
end
offset_id(::TensorFragmentDataMessage) = UInt16(0x2)
offset_since_version(::TensorFragmentDataMessage) = UInt16(0x0)
offset_in_acting_version(m::TensorFragmentDataMessage) = sbe_acting_version(m) >= UInt16(0x0)
offset_encoding_offset(::TensorFragmentDataMessage) = 64
offset_null_value(::TensorFragmentDataMessage) = Int64(-9223372036854775808)
offset_min_value(::TensorFragmentDataMessage) = Int64(-9223372036854775807)
offset_max_value(::TensorFragmentDataMessage) = Int64(9223372036854775807)
offset_encoding_length(::TensorFragmentDataMessage) = 8

@inline function offset(m::TensorFragmentDataMessageDecoder)
    return decode_le(Int64, m.buffer, m.offset + 64)
end
@inline offset!(m::TensorFragmentDataMessageEncoder, value) = encode_le(Int64, m.buffer, m.offset + 64, value)

function fragment_meta_attribute(::TensorFragmentDataMessage, meta_attribute)
    meta_attribute === :presence && return Symbol("required")
    return Symbol("")
end

fragment_character_encoding(::TensorFragmentDataMessage) = "null"
fragment_in_acting_version(m::TensorFragmentDataMessage) = sbe_acting_version(m) >= 0
fragment_id(::TensorFragmentDataMessage) = 10
fragment_header_length(::TensorFragmentDataMessage) = 4

@inline function fragment_length(m::TensorFragmentDataMessage)
    return decode_le(UInt32, m.buffer, sbe_position(m))
end

@inline function fragment_length!(m::TensorFragmentDataMessageEncoder, n)
    if !checkbounds(Bool, m.buffer, sbe_position(m) + 4 + n)
        error("buffer too short for data length")
    elseif n > 1073741824
        error("data length too large for length type")
    end
    return encode_le(UInt32, m.buffer, sbe_position(m), n)
end

@inline function skip_fragment!(m::TensorFragmentDataMessage)
    len = fragment_length(m)
    pos = sbe_position(m) + 4
    sbe_position!(m, pos + len)
    return len
end

@inline function fragment(m::TensorFragmentDataMessageDecoder)
    len = fragment_length(m)
    pos = sbe_position(m) + 4
    sbe_position!(m, pos + len)
    return view(m.buffer, pos+1:pos+len)
end

@inline function fragment!(m::TensorFragmentDataMessageEncoder; length::Int64)
    fragment_length!(m, length)
    pos = sbe_position(m) + 4
    sbe_position!(m, pos + length)
    return view(m.buffer, pos+1:pos+length)
end

@inline function fragment!(m::TensorFragmentDataMessageEncoder, src)
    len = Base.length(src)
    fragment_length!(m, len)
    pos = sbe_position(m) + 4
    sbe_position!(m, pos + len)
    dest = view(m.buffer, pos+1:pos+len)
    copyto!(dest, src)
end

function show(io::IO, m::TensorFragmentDataMessage{T}) where {T}
    println(io, "TensorFragmentDataMessage view over a type $T")
    println(io, "SbeBlockLength: ", sbe_block_length(m))
    println(io, "SbeTemplateId:  ", sbe_template_id(m))
    println(io, "SbeSchemaId:    ", sbe_schema_id(m))
    println(io, "SbeSchemaVersion: ", sbe_schema_version(m))

    writer = TensorFragmentDataMessageDecoder(sbe_buffer(m), sbe_offset(m), Ref(0),
        sbe_block_length(m), sbe_schema_version(m))
    print(io, "header: ")
    show(io, header(writer))

    println(io)
    print(io, "offset: ")
    print(io, offset(writer))

    println(io)
    print(io, "fragment: ")
    print(io, skip_fragment!(writer))
    print(io, " bytes of raw data")

    nothing
end

@inline function sbe_skip!(m::TensorFragmentDataMessage)
    sbe_rewind!(m)
    skip_fragment!(m)
    return
end
