# Generated SBE (Simple Binary Encoding) message codec
# Code generated by SBE. DO NOT EDIT.

struct EventMessage{T<:AbstractArray{UInt8}}
    buffer::T
    offset::Int64
    position_ptr::Base.RefValue{Int64}
    acting_block_length::Int64
    acting_version::Int64
end

@inline function EventMessage(context::SbeCodecContext, buffer, offset, acting_block_length, acting_version)
    sbe_position!(context, offset + acting_block_length)
    return EventMessage(buffer, offset, sbe_position_ptr(context), acting_block_length, acting_version)
end
@inline EventMessage() = EventMessage(SbeCodecContext(), UInt8[], 0, 0, 0)

@inline function EventMessageDecoder(context::SbeCodecContext, buffer, offset,
    acting_block_length, acting_version)
    return EventMessage(context, buffer, offset, acting_block_length, acting_version)
end

@inline function EventMessageDecoder(context::SbeCodecContext, buffer, offset, hdr::MessageHeader)
    return EventMessageDecoder(context, buffer, offset + sbe_encoded_length(hdr),
        Int64(blockLength(hdr)), Int64(version(hdr)))
end

@inline function EventMessageDecoder(context::SbeCodecContext, buffer, hdr::MessageHeader)
    return EventMessageDecoder(context, buffer, 0, hdr)
end

@inline function EventMessageEncoder(context::SbeCodecContext, buffer, offset=0)
    return EventMessage(context, buffer, offset, 100, 0)
end

@inline function EventMessageEncoder(context::SbeCodecContext, buffer, offset, hdr::MessageHeader)
    blockLength!(hdr, 100)
    templateId!(hdr, 1)
    schemaId!(hdr, 6)
    version!(hdr, 0)
    return EventMessage(context, buffer, offset + sbe_encoded_length(hdr), 100, 0)
end

@inline function EventMessageEncoder(context::SbeCodecContext, buffer, hdr::MessageHeader)
    return EventMessageEncoder(context, buffer, 0, hdr)
end

sbe_buffer(m::EventMessage) = @inbounds view(m.buffer, m.offset+1:m.offset+sbe_decoded_length(m))
sbe_offset(m::EventMessage) = m.offset
sbe_position_ptr(m::EventMessage) = m.position_ptr
sbe_acting_block_length(m::EventMessage) = m.acting_block_length
sbe_acting_version(m::EventMessage) = m.acting_version
sbe_position(m::EventMessage) = m.position_ptr[]
@inline sbe_check_position(m::EventMessage, position) = (checkbounds(m.buffer, position + 1); position)
@inline sbe_position!(m::EventMessage, position) = m.position_ptr[] = sbe_check_position(m, position)
sbe_block_length(::EventMessage) = 100
sbe_template_id(::EventMessage) = 1
sbe_schema_id(::EventMessage) = 6
sbe_schema_version(::EventMessage) = 0
sbe_semantic_type(::EventMessage) = ""
sbe_semantic_version(::EventMessage) = ""
sbe_rewind!(m::EventMessage) = (sbe_position!(m, m.offset + m.acting_block_length); m)
sbe_encoded_length(m::EventMessage) = sbe_position(m) - m.offset
@inline function sbe_decoded_length(m::EventMessage)
    skipper = EventMessage(SbeCodecContext(), m.buffer, m.offset, 100, sbe_acting_version(m))
    skip!(skipper)
    return sbe_encoded_length(skipper)
end

function header_meta_attribute(::EventMessage, meta_attribute)
    meta_attribute === :presence && return Symbol("required")
    error(lazy"unknown attribute: $meta_attribute")
end
header_id(::EventMessage) = 1
header_in_acting_version(m::EventMessage) = sbe_acting_version(m) >= 0
header_encoding_offset(::EventMessage) = 0
header(m::EventMessage) = SpidersMessageHeader(m.buffer, m.offset + 0)

function format_meta_attribute(::EventMessage, meta_attribute)
    meta_attribute === :presence && return Symbol("required")
    error(lazy"unknown attribute: $meta_attribute")
end
format_id(::EventMessage) = 2
format_in_acting_version(m::EventMessage) = sbe_acting_version(m) >= 0
format_encoding_offset(::EventMessage) = 64
format_encoding_length(::EventMessage) = 1
@inline function format_raw(m::EventMessage)
    return decode_le(Int8, m.buffer, m.offset + 64)
end
@inline function format(m::EventMessage)
    return Format.SbeEnum(decode_le(Int8, m.buffer, m.offset + 64))
end
@inline format!(m::EventMessage, value::Format.SbeEnum) = encode_le(Int8, m.buffer, m.offset + 64, Int8(value))

function reserved1_meta_attribute(::EventMessage, meta_attribute)
    meta_attribute === :presence && return Symbol("required")
    error(lazy"unknown attribute: $meta_attribute")
end
reserved1_id(::EventMessage) = 9
reserved1_in_acting_version(m::EventMessage) = sbe_acting_version(m) >= 0
reserved1_encoding_offset(::EventMessage) = 65
reserved1_null_value(::EventMessage) = Int8(-128)
reserved1_min_value(::EventMessage) = Int8(-127)
reserved1_max_value(::EventMessage) = Int8(127)
reserved1_encoding_length(::EventMessage) = 3
reserved1_length(::EventMessage) = 3
reserved1_eltype(::EventMessage) = Int8

@inline function reserved1(m::EventMessage)
    return @inbounds mappedarray(ltoh, htol, reinterpret(Int8, view(m.buffer, m.offset+65+1:m.offset+65+sizeof(Int8)*3)))
end

@inline function reserved1_static(m::EventMessage)
    return @inbounds mappedarray(ltoh, reinterpret(SVector{3,Int8}, view(m.buffer, m.offset+65+1:m.offset+65+sizeof(Int8)*3))[])
end

@inline function reserved1!(m::EventMessage, value)
    copyto!(mappedarray(ltoh, htol, reinterpret(Int8, view(m.buffer, m.offset+65+1:m.offset+65+sizeof(Int8)*3))), value)
end

function key_meta_attribute(::EventMessage, meta_attribute)
    meta_attribute === :presence && return Symbol("required")
    error(lazy"unknown attribute: $meta_attribute")
end
key_id(::EventMessage) = 10
key_in_acting_version(m::EventMessage) = sbe_acting_version(m) >= 0
key_encoding_offset(::EventMessage) = 68
key_null_value(::EventMessage) = UInt8(0x0)
key_min_value(::EventMessage) = UInt8(0x20)
key_max_value(::EventMessage) = UInt8(0x7e)
key_encoding_length(::EventMessage) = 32
key_length(::EventMessage) = 32
key_eltype(::EventMessage) = UInt8

@inline function key(m::EventMessage)
    return @inbounds mappedarray(ltoh, htol, reinterpret(UInt8, view(m.buffer, m.offset+68+1:m.offset+68+sizeof(UInt8)*32)))
end

@inline function key_static(m::EventMessage)
    return @inbounds mappedarray(ltoh, reinterpret(SVector{32,UInt8}, view(m.buffer, m.offset+68+1:m.offset+68+sizeof(UInt8)*32))[])
end

@inline function key(T::Type{<:AbstractString}, m::EventMessage)
    value = @inbounds view(m.buffer, m.offset+1+68:m.offset+68+sizeof(UInt8)*32)
    return T(rstrip_nul(value))
end

key_as_string(m::EventMessage) = key(StringView, m)

@inline function key!(m::EventMessage, value)
    copyto!(mappedarray(ltoh, htol, reinterpret(UInt8, view(m.buffer, m.offset+68+1:m.offset+68+sizeof(UInt8)*32))), value)
end

function value_meta_attribute(::EventMessage, meta_attribute)
    meta_attribute === :presence && return Symbol("required")
    error(lazy"unknown attribute: $meta_attribute")
end

value_character_encoding(::EventMessage) = "null"
value_in_acting_version(m::EventMessage) = sbe_acting_version(m) >= 0
value_id(::EventMessage) = 20
value_header_length(::EventMessage) = 4

@inline function value_length(m::EventMessage)
    return decode_le(UInt32, m.buffer, sbe_position(m))
end

@inline function value_length!(m::EventMessage, n)
    if !checkbounds(Bool, m.buffer, sbe_position(m) + 1 + 4 + n)
        error("buffer too short for data length")
    end
    return encode_le(UInt32, m.buffer, sbe_position(m), n)
end

@inline function skip_value!(m::EventMessage)
    len = value_length(m)
    pos = sbe_position(m) + len + 4
    sbe_position!(m, pos)
    return len
end

@inline function value(m::EventMessage)
    len = value_length(m)
    pos = sbe_position(m) + 4
    sbe_position!(m, pos + len)
    return @inbounds view(m.buffer, pos+1:pos+len)
end

@inline function value!(m::EventMessage, len::Int)
    value_length!(m, len)
    pos = sbe_position(m) + 4
    sbe_position!(m, pos + len)
    return @inbounds view(m.buffer, pos+1:pos+len)
end

function print_fields(io::IO, writer::EventMessage{T}) where {T}
    println(io, "EventMessage view over a type $T")
    println(io, "SbeBlockLength: ", sbe_block_length(writer))
    println(io, "SbeTemplateId:  ", sbe_template_id(writer))
    println(io, "SbeSchemaId:    ", sbe_schema_id(writer))
    println(io, "SbeSchemaVersion: ", sbe_schema_version(writer))

    sbe_rewind!(writer)
    print(io, "header: ")
    print_fields(io, header(writer))

    println(io)
    print(io, "format: ")
    print(io, format(writer))

    println(io)
    print(io, "reserved1: ")
    print(io, reserved1(writer))

    println(io)
    print(io, "key: ")
    print(io, "\"")
    print(io, key(StringView, writer))
    print(io, "\"")

    println(io)
    print(io, "value: ")
    print(io, skip_value!(writer))
    print(io, " bytes of raw data")

    sbe_rewind!(writer)
    nothing
end

@inline function skip!(m::EventMessage)
    skip_value!(m)
    return
end
