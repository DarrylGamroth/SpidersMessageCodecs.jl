# Generated SBE (Simple Binary Encoding) message codec
# Code generated by SBE. DO NOT EDIT.

abstract type SparseMatrixCSXMessage{T} end

struct SparseMatrixCSXMessageDecoder{T<:AbstractArray{UInt8}} <: SparseMatrixCSXMessage{T}
    buffer::T
    offset::Int64
    position_ptr::Base.RefValue{Int64}
    acting_block_length::Int64
    acting_version::Int64
end

struct SparseMatrixCSXMessageEncoder{T<:AbstractArray{UInt8}} <: SparseMatrixCSXMessage{T}
    buffer::T
    offset::Int64
    position_ptr::Base.RefValue{Int64}
end

@inline function SparseMatrixCSXMessageDecoder(context::SbeCodecContext, buffer, offset,
    acting_block_length, acting_version)
    sbe_position!(context, offset + acting_block_length)
    SparseMatrixCSXMessageDecoder(buffer, offset, sbe_position_ptr(context), acting_block_length, acting_version)
end

@inline function SparseMatrixCSXMessageDecoder(context::SbeCodecContext, buffer, offset, hdr::MessageHeader)
    SparseMatrixCSXMessageDecoder(context, buffer, offset + sbe_encoded_length(hdr),
        Int64(blockLength(hdr)), Int64(version(hdr)))
end

@inline function SparseMatrixCSXMessageDecoder(context::SbeCodecContext, buffer, hdr::MessageHeader)
    SparseMatrixCSXMessageDecoder(context, buffer, 0, hdr)
end
@inline function SparseMatrixCSXMessageDecoder(buffer, offset, acting_block_length, acting_version)
    SparseMatrixCSXMessageDecoder(SbeCodecContext(), buffer, offset, acting_block_length, acting_version)
end

@inline SparseMatrixCSXMessageDecoder(buffer, offset, hdr) = SparseMatrixCSXMessageDecoder(SbeCodecContext(), buffer, offset, hdr)
@inline SparseMatrixCSXMessageDecoder(buffer, hdr) = SparseMatrixCSXMessageDecoder(SbeCodecContext(), buffer, 0, hdr)
 @inline function SparseMatrixCSXMessageEncoder(context::SbeCodecContext, buffer, offset=0)
    sbe_position!(context, offset + 84)
    SparseMatrixCSXMessageEncoder(buffer, offset, sbe_position_ptr(context))
end
@inline SparseMatrixCSXMessageEncoder(buffer, offset=0) = SparseMatrixCSXMessageEncoder(SbeCodecContext(), buffer, offset)
@inline SparseMatrixCSXMessage() = SparseMatrixCSXMessageEncoder(SbeCodecContext(), UInt8[])

@inline function SparseMatrixCSXMessageEncoder(context::SbeCodecContext, buffer, offset, hdr::MessageHeader)
    blockLength!(hdr, 84)
    templateId!(hdr, 2)
    schemaId!(hdr, 1)
    version!(hdr, 0)
    SparseMatrixCSXMessageEncoder(context, buffer, offset + sbe_encoded_length(hdr))
end

@inline function SparseMatrixCSXMessageEncoder(context::SbeCodecContext, buffer, hdr::MessageHeader)
    SparseMatrixCSXMessageEncoder(context, buffer, 0, hdr)
end

@inline function SparseMatrixCSXMessageEncoder(buffer, offset, hdr::MessageHeader)
    SparseMatrixCSXMessageEncoder(SbeCodecContext(), buffer, offset, hdr)
end

@inline function SparseMatrixCSXMessageEncoder(buffer, hdr::MessageHeader)
    SparseMatrixCSXMessageEncoder(SbeCodecContext(), buffer, 0, hdr)
end

sbe_buffer(m::SparseMatrixCSXMessage) = m.buffer
sbe_offset(m::SparseMatrixCSXMessage) = m.offset
sbe_position_ptr(m::SparseMatrixCSXMessage) = m.position_ptr
sbe_position(m::SparseMatrixCSXMessage) = m.position_ptr[]
@inline sbe_check_position(m::SparseMatrixCSXMessage, position) = (checkbounds(m.buffer, position + 1); position)
@inline sbe_position!(m::SparseMatrixCSXMessage, position) = m.position_ptr[] = position
sbe_block_length(::SparseMatrixCSXMessage) = 84
sbe_template_id(::SparseMatrixCSXMessage) = 2
sbe_schema_id(::SparseMatrixCSXMessage) = 1
sbe_schema_version(::SparseMatrixCSXMessage) = 0
sbe_semantic_type(::SparseMatrixCSXMessage) = ""
sbe_semantic_version(::SparseMatrixCSXMessage) = ""
sbe_encoded_length(m::SparseMatrixCSXMessageEncoder) = sbe_position(m) - m.offset
sbe_rewind!(m::SparseMatrixCSXMessageEncoder) = sbe_position!(m, m.offset + 84)

sbe_acting_block_length(m::SparseMatrixCSXMessageDecoder) = m.acting_block_length
sbe_acting_version(m::SparseMatrixCSXMessageDecoder) = m.acting_version
sbe_rewind!(m::SparseMatrixCSXMessageDecoder) = sbe_position!(m, m.offset + m.acting_block_length)

@inline function sbe_decoded_length(m::SparseMatrixCSXMessageDecoder)
    skipper = SparseMatrixCSXMessageEncoder(m.buffer, m.offset)
    skip!(skipper)
    return sbe_encoded_length(skipper)
end

function sbe_decoded_buffer(m::SparseMatrixCSXMessageDecoder)
    offset = m.offset - sbe_encoded_length(MessageHeader())
    offset < 0 && throw(ArgumentError("Message offset is negative"))
    return view(m.buffer, offset+1:offset+sbe_decoded_length(m))
end

function sbe_encoded_buffer(m::SparseMatrixCSXMessageEncoder)
    offset = m.offset - sbe_encoded_length(MessageHeader())
    offset < 0 && throw(ArgumentError("Message offset is negative"))
    d = SparseMatrixCSXMessageDecoder(m.buffer, MessageHeader(m.buffer, offset))
    return view(d.buffer, offset+1:offset+sbe_decoded_length(d))
end

function header_meta_attribute(::SparseMatrixCSXMessage, meta_attribute)
    meta_attribute === :presence && return Symbol("required")
    error(lazy"unknown attribute: $meta_attribute")
end
header_id(::SparseMatrixCSXMessage) = 1
header_since_version(::SparseMatrixCSXMessage) = 0
header_in_acting_version(m::SparseMatrixCSXMessage) = sbe_acting_version(m) >= 0
header_encoding_offset(::SparseMatrixCSXMessage) = 0
header(m::SparseMatrixCSXMessage) = SpidersMessageHeader(m.buffer, m.offset + 0)

function format_meta_attribute(::SparseMatrixCSXMessage, meta_attribute)
    meta_attribute === :presence && return Symbol("required")
    error(lazy"unknown attribute: $meta_attribute")
end
format_id(::SparseMatrixCSXMessage) = 2
format_since_version(::SparseMatrixCSXMessage) = 0
format_in_acting_version(m::SparseMatrixCSXMessage) = sbe_acting_version(m) >= 0
format_encoding_offset(::SparseMatrixCSXMessage) = 64
format_encoding_length(::SparseMatrixCSXMessage) = 1
@inline function format(::Type{Integer}, m::SparseMatrixCSXMessageDecoder)
    return decode_le(Int8, m.buffer, m.offset + 64)
end
@inline function format(m::SparseMatrixCSXMessageDecoder)
    return Format.SbeEnum(decode_le(Int8, m.buffer, m.offset + 64))
end
@inline format!(m::SparseMatrixCSXMessageEncoder, value::Format.SbeEnum) = encode_le(Int8, m.buffer, m.offset + 64, Int8(value))

function order_meta_attribute(::SparseMatrixCSXMessage, meta_attribute)
    meta_attribute === :presence && return Symbol("required")
    error(lazy"unknown attribute: $meta_attribute")
end
order_id(::SparseMatrixCSXMessage) = 3
order_since_version(::SparseMatrixCSXMessage) = 0
order_in_acting_version(m::SparseMatrixCSXMessage) = sbe_acting_version(m) >= 0
order_encoding_offset(::SparseMatrixCSXMessage) = 65
order_encoding_length(::SparseMatrixCSXMessage) = 1
@inline function order(::Type{Integer}, m::SparseMatrixCSXMessageDecoder)
    return decode_le(Int8, m.buffer, m.offset + 65)
end
@inline function order(m::SparseMatrixCSXMessageDecoder)
    return Order.SbeEnum(decode_le(Int8, m.buffer, m.offset + 65))
end
@inline order!(m::SparseMatrixCSXMessageEncoder, value::Order.SbeEnum) = encode_le(Int8, m.buffer, m.offset + 65, Int8(value))

function indexing_meta_attribute(::SparseMatrixCSXMessage, meta_attribute)
    meta_attribute === :presence && return Symbol("required")
    error(lazy"unknown attribute: $meta_attribute")
end
indexing_id(::SparseMatrixCSXMessage) = 4
indexing_since_version(::SparseMatrixCSXMessage) = 0
indexing_in_acting_version(m::SparseMatrixCSXMessage) = sbe_acting_version(m) >= 0
indexing_encoding_offset(::SparseMatrixCSXMessage) = 66
indexing_encoding_length(::SparseMatrixCSXMessage) = 1
@inline function indexing(::Type{Integer}, m::SparseMatrixCSXMessageDecoder)
    return decode_le(Int8, m.buffer, m.offset + 66)
end
@inline function indexing(m::SparseMatrixCSXMessageDecoder)
    return Indexing.SbeEnum(decode_le(Int8, m.buffer, m.offset + 66))
end
@inline indexing!(m::SparseMatrixCSXMessageEncoder, value::Indexing.SbeEnum) = encode_le(Int8, m.buffer, m.offset + 66, Int8(value))

function reserved1_meta_attribute(::SparseMatrixCSXMessage, meta_attribute)
    meta_attribute === :presence && return Symbol("required")
    error(lazy"unknown attribute: $meta_attribute")
end
reserved1_id(::SparseMatrixCSXMessage) = 5
reserved1_since_version(::SparseMatrixCSXMessage) = 0
reserved1_in_acting_version(m::SparseMatrixCSXMessage) = sbe_acting_version(m) >= 0
reserved1_encoding_offset(::SparseMatrixCSXMessage) = 67
reserved1_null_value(::SparseMatrixCSXMessage) = Int8(-128)
reserved1_min_value(::SparseMatrixCSXMessage) = Int8(-127)
reserved1_max_value(::SparseMatrixCSXMessage) = Int8(127)
reserved1_encoding_length(::SparseMatrixCSXMessage) = 1

@inline function reserved1(m::SparseMatrixCSXMessageDecoder)
    return decode_le(Int8, m.buffer, m.offset + 67)
end
@inline reserved1!(m::SparseMatrixCSXMessageEncoder, value) = encode_le(Int8, m.buffer, m.offset + 67, value)

function shape_meta_attribute(::SparseMatrixCSXMessage, meta_attribute)
    meta_attribute === :presence && return Symbol("required")
    error(lazy"unknown attribute: $meta_attribute")
end
shape_id(::SparseMatrixCSXMessage) = 6
shape_since_version(::SparseMatrixCSXMessage) = 0
shape_in_acting_version(m::SparseMatrixCSXMessage) = sbe_acting_version(m) >= 0
shape_encoding_offset(::SparseMatrixCSXMessage) = 68
shape_null_value(::SparseMatrixCSXMessage) = Int64(-9223372036854775808)
shape_min_value(::SparseMatrixCSXMessage) = Int64(-9223372036854775807)
shape_max_value(::SparseMatrixCSXMessage) = Int64(9223372036854775807)
shape_encoding_length(::SparseMatrixCSXMessage) = 16
shape_length(::SparseMatrixCSXMessage) = 2
shape_eltype(::SparseMatrixCSXMessage) = Int64

@inline function shape(m::SparseMatrixCSXMessageDecoder)
    return mappedarray(ltoh, reinterpret(Int64, view(m.buffer, m.offset+68+1:m.offset+68+sizeof(Int64)*2)))
end

@inline function shape(::Type{<:SVector},m::SparseMatrixCSXMessageDecoder)
    return mappedarray(ltoh, reinterpret(SVector{2,Int64}, view(m.buffer, m.offset+68+1:m.offset+68+sizeof(Int64)*2))[])
end

@inline function shape!(m::SparseMatrixCSXMessageEncoder)
    return mappedarray(ltoh, htol, reinterpret(Int64, view(m.buffer, m.offset+68+1:m.offset+68+sizeof(Int64)*2)))
end

@inline function shape!(m::SparseMatrixCSXMessageEncoder, value)
    copyto!(mappedarray(ltoh, htol, reinterpret(Int64, view(m.buffer, m.offset+68+1:m.offset+68+sizeof(Int64)*2))), value)
end

function indexPointer_meta_attribute(::SparseMatrixCSXMessage, meta_attribute)
    meta_attribute === :semantic_type && return Symbol("int64")
    meta_attribute === :presence && return Symbol("required")
    error(lazy"unknown attribute: $meta_attribute")
end

indexPointer_character_encoding(::SparseMatrixCSXMessage) = "null"
indexPointer_in_acting_version(m::SparseMatrixCSXMessage) = sbe_acting_version(m) >= 0
indexPointer_id(::SparseMatrixCSXMessage) = 20
indexPointer_header_length(::SparseMatrixCSXMessage) = 4

@inline function indexPointer_length(m::SparseMatrixCSXMessage)
    return decode_le(UInt32, m.buffer, sbe_position(m))
end

@inline function indexPointer_length!(m::SparseMatrixCSXMessageEncoder, n)
    if !checkbounds(Bool, m.buffer, sbe_position(m) + 1 + 4 + n)
        error("buffer too short for data length")
    end
    return encode_le(UInt32, m.buffer, sbe_position(m), n)
end

@inline function skip_indexPointer!(m::SparseMatrixCSXMessage)
    len = indexPointer_length(m)
    pos = sbe_position(m) + len + 4
    sbe_position!(m, pos)
    return len
end

@inline function indexPointer(m::SparseMatrixCSXMessageDecoder)
    len = indexPointer_length(m)
    pos = sbe_position(m) + 4
    sbe_position!(m, pos + len)
    return view(m.buffer, pos+1:pos+len)
end

@inline function indexPointer!(m::SparseMatrixCSXMessageEncoder, len::Int)
    indexPointer_length!(m, len)
    pos = sbe_position(m) + 4
    sbe_position!(m, pos + len)
    return view(m.buffer, pos+1:pos+len)
end

@inline function indexPointer!(m::SparseMatrixCSXMessageEncoder, src)
    len = Base.length(src)
    indexPointer_length!(m, len)
    pos = sbe_position(m) + 4
    sbe_position!(m, pos + len)
    dest = view(m.buffer, pos+1:pos+len)
    copyto!(dest, src)
end

function indicies_meta_attribute(::SparseMatrixCSXMessage, meta_attribute)
    meta_attribute === :semantic_type && return Symbol("int64")
    meta_attribute === :presence && return Symbol("required")
    error(lazy"unknown attribute: $meta_attribute")
end

indicies_character_encoding(::SparseMatrixCSXMessage) = "null"
indicies_in_acting_version(m::SparseMatrixCSXMessage) = sbe_acting_version(m) >= 0
indicies_id(::SparseMatrixCSXMessage) = 21
indicies_header_length(::SparseMatrixCSXMessage) = 4

@inline function indicies_length(m::SparseMatrixCSXMessage)
    return decode_le(UInt32, m.buffer, sbe_position(m))
end

@inline function indicies_length!(m::SparseMatrixCSXMessageEncoder, n)
    if !checkbounds(Bool, m.buffer, sbe_position(m) + 1 + 4 + n)
        error("buffer too short for data length")
    end
    return encode_le(UInt32, m.buffer, sbe_position(m), n)
end

@inline function skip_indicies!(m::SparseMatrixCSXMessage)
    len = indicies_length(m)
    pos = sbe_position(m) + len + 4
    sbe_position!(m, pos)
    return len
end

@inline function indicies(m::SparseMatrixCSXMessageDecoder)
    len = indicies_length(m)
    pos = sbe_position(m) + 4
    sbe_position!(m, pos + len)
    return view(m.buffer, pos+1:pos+len)
end

@inline function indicies!(m::SparseMatrixCSXMessageEncoder, len::Int)
    indicies_length!(m, len)
    pos = sbe_position(m) + 4
    sbe_position!(m, pos + len)
    return view(m.buffer, pos+1:pos+len)
end

@inline function indicies!(m::SparseMatrixCSXMessageEncoder, src)
    len = Base.length(src)
    indicies_length!(m, len)
    pos = sbe_position(m) + 4
    sbe_position!(m, pos + len)
    dest = view(m.buffer, pos+1:pos+len)
    copyto!(dest, src)
end

function values_meta_attribute(::SparseMatrixCSXMessage, meta_attribute)
    meta_attribute === :presence && return Symbol("required")
    error(lazy"unknown attribute: $meta_attribute")
end

values_character_encoding(::SparseMatrixCSXMessage) = "null"
values_in_acting_version(m::SparseMatrixCSXMessage) = sbe_acting_version(m) >= 0
values_id(::SparseMatrixCSXMessage) = 30
values_header_length(::SparseMatrixCSXMessage) = 4

@inline function values_length(m::SparseMatrixCSXMessage)
    return decode_le(UInt32, m.buffer, sbe_position(m))
end

@inline function values_length!(m::SparseMatrixCSXMessageEncoder, n)
    if !checkbounds(Bool, m.buffer, sbe_position(m) + 1 + 4 + n)
        error("buffer too short for data length")
    end
    return encode_le(UInt32, m.buffer, sbe_position(m), n)
end

@inline function skip_values!(m::SparseMatrixCSXMessage)
    len = values_length(m)
    pos = sbe_position(m) + len + 4
    sbe_position!(m, pos)
    return len
end

@inline function values(m::SparseMatrixCSXMessageDecoder)
    len = values_length(m)
    pos = sbe_position(m) + 4
    sbe_position!(m, pos + len)
    return view(m.buffer, pos+1:pos+len)
end

@inline function values!(m::SparseMatrixCSXMessageEncoder, len::Int)
    values_length!(m, len)
    pos = sbe_position(m) + 4
    sbe_position!(m, pos + len)
    return view(m.buffer, pos+1:pos+len)
end

@inline function values!(m::SparseMatrixCSXMessageEncoder, src)
    len = Base.length(src)
    values_length!(m, len)
    pos = sbe_position(m) + 4
    sbe_position!(m, pos + len)
    dest = view(m.buffer, pos+1:pos+len)
    copyto!(dest, src)
end

function Base.show(io::IO, m::SparseMatrixCSXMessage{T}) where {T}
    println(io, "SparseMatrixCSXMessage view over a type $T")
    println(io, "SbeBlockLength: ", sbe_block_length(m))
    println(io, "SbeTemplateId:  ", sbe_template_id(m))
    println(io, "SbeSchemaId:    ", sbe_schema_id(m))
    println(io, "SbeSchemaVersion: ", sbe_schema_version(m))

    writer = SparseMatrixCSXMessageDecoder(sbe_buffer(m), sbe_offset(m), sbe_block_length(m), sbe_schema_version(m))
    print(io, "header: ")
    Base.show(io, header(writer))

    println(io)
    print(io, "format: ")
    print(io, format(writer))

    println(io)
    print(io, "order: ")
    print(io, order(writer))

    println(io)
    print(io, "indexing: ")
    print(io, indexing(writer))

    println(io)
    print(io, "reserved1: ")
    print(io, reserved1(writer))

    println(io)
    print(io, "shape: ")
    print(io, shape(writer))

    println(io)
    print(io, "indexPointer: ")
    print(io, skip_indexPointer!(writer))
    print(io, " bytes of raw data")

    println(io)
    print(io, "indicies: ")
    print(io, skip_indicies!(writer))
    print(io, " bytes of raw data")

    println(io)
    print(io, "values: ")
    print(io, skip_values!(writer))
    print(io, " bytes of raw data")

    nothing
end

@inline function skip!(m::SparseMatrixCSXMessage)
    skip_indexPointer!(m)
    skip_indicies!(m)
    skip_values!(m)
    return
end
