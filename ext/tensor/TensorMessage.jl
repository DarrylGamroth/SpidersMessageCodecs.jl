# Generated SBE (Simple Binary Encoding) message codec
# Code generated by SBE. DO NOT EDIT.

struct TensorMessage{T<:AbstractArray{UInt8}}
    buffer::T
    offset::Int64
    position_ptr::Base.RefValue{Int64}
    acting_block_length::Int64
    acting_version::Int64
end

@inline function TensorMessage(context::SbeCodecContext, buffer, offset, acting_block_length, acting_version)
    sbe_position!(context, offset + acting_block_length)
    return TensorMessage(buffer, offset, sbe_position_ptr(context), acting_block_length, acting_version)
end
@inline TensorMessage() = TensorMessage(SbeCodecContext(), UInt8[], 0, 0, 0)

@inline function TensorMessageDecoder(context::SbeCodecContext, buffer, offset,
    acting_block_length, acting_version)
    return TensorMessage(context, buffer, offset, acting_block_length, acting_version)
end

@inline function TensorMessageDecoder(context::SbeCodecContext, buffer, offset, hdr::MessageHeader)
    return TensorMessageDecoder(context, buffer, offset + sbe_encoded_length(hdr),
        Int64(blockLength(hdr)), Int64(version(hdr)))
end

@inline function TensorMessageDecoder(context::SbeCodecContext, buffer, hdr::MessageHeader)
    return TensorMessageDecoder(context, buffer, 0, hdr)
end

@inline function TensorMessageEncoder(context::SbeCodecContext, buffer, offset=0)
    return TensorMessage(context, buffer, offset, 68, 0)
end

@inline function TensorMessageEncoder(context::SbeCodecContext, buffer, offset, hdr::MessageHeader)
    blockLength!(hdr, 68)
    templateId!(hdr, 1)
    schemaId!(hdr, 1)
    version!(hdr, 0)
    return TensorMessage(context, buffer, offset + sbe_encoded_length(hdr), 68, 0)
end

@inline function TensorMessageEncoder(context::SbeCodecContext, buffer, hdr::MessageHeader)
    return TensorMessageEncoder(context, buffer, 0, hdr)
end

sbe_buffer(m::TensorMessage) = @inbounds view(m.buffer, m.offset+1:m.offset+sbe_decoded_length(m))
sbe_offset(m::TensorMessage) = m.offset
sbe_position_ptr(m::TensorMessage) = m.position_ptr
sbe_acting_block_length(m::TensorMessage) = m.acting_block_length
sbe_acting_version(m::TensorMessage) = m.acting_version
sbe_position(m::TensorMessage) = m.position_ptr[]
@inline sbe_check_position(m::TensorMessage, position) = (checkbounds(m.buffer, position + 1); position)
@inline sbe_position!(m::TensorMessage, position) = m.position_ptr[] = sbe_check_position(m, position)
sbe_block_length(::TensorMessage) = 68
sbe_template_id(::TensorMessage) = 1
sbe_schema_id(::TensorMessage) = 1
sbe_schema_version(::TensorMessage) = 0
sbe_semantic_type(::TensorMessage) = ""
sbe_semantic_version(::TensorMessage) = ""
sbe_rewind!(m::TensorMessage) = (sbe_position!(m, m.offset + m.acting_block_length); m)
sbe_encoded_length(m::TensorMessage) = sbe_position(m) - m.offset
@inline function sbe_decoded_length(m::TensorMessage)
    skipper = TensorMessage(SbeCodecContext(), m.buffer, m.offset, 68, sbe_acting_version(m))
    skip!(skipper)
    return sbe_encoded_length(skipper)
end

function header_meta_attribute(::TensorMessage, meta_attribute)
    meta_attribute === :presence && return Symbol("required")
    error(lazy"unknown attribute: $meta_attribute")
end
header_id(::TensorMessage) = 1
header_in_acting_version(m::TensorMessage) = sbe_acting_version(m) >= 0
header_encoding_offset(::TensorMessage) = 0
header(m::TensorMessage) = SpidersMessageHeader(m.buffer, m.offset + 0)

function format_meta_attribute(::TensorMessage, meta_attribute)
    meta_attribute === :presence && return Symbol("required")
    error(lazy"unknown attribute: $meta_attribute")
end
format_id(::TensorMessage) = 2
format_in_acting_version(m::TensorMessage) = sbe_acting_version(m) >= 0
format_encoding_offset(::TensorMessage) = 64
format_encoding_length(::TensorMessage) = 1
@inline function format_raw(m::TensorMessage)
    return decode_le(Int8, m.buffer, m.offset + 64)
end
@inline function format(m::TensorMessage)
    return Format.SbeEnum(decode_le(Int8, m.buffer, m.offset + 64))
end
@inline format!(m::TensorMessage, value::Format.SbeEnum) = encode_le(Int8, m.buffer, m.offset + 64, Int8(value))

function order_meta_attribute(::TensorMessage, meta_attribute)
    meta_attribute === :presence && return Symbol("required")
    error(lazy"unknown attribute: $meta_attribute")
end
order_id(::TensorMessage) = 3
order_in_acting_version(m::TensorMessage) = sbe_acting_version(m) >= 0
order_encoding_offset(::TensorMessage) = 65
order_encoding_length(::TensorMessage) = 1
@inline function order_raw(m::TensorMessage)
    return decode_le(Int8, m.buffer, m.offset + 65)
end
@inline function order(m::TensorMessage)
    return Order.SbeEnum(decode_le(Int8, m.buffer, m.offset + 65))
end
@inline order!(m::TensorMessage, value::Order.SbeEnum) = encode_le(Int8, m.buffer, m.offset + 65, Int8(value))

function reserved1_meta_attribute(::TensorMessage, meta_attribute)
    meta_attribute === :presence && return Symbol("required")
    error(lazy"unknown attribute: $meta_attribute")
end
reserved1_id(::TensorMessage) = 4
reserved1_in_acting_version(m::TensorMessage) = sbe_acting_version(m) >= 0
reserved1_encoding_offset(::TensorMessage) = 66
reserved1_null_value(::TensorMessage) = Int8(-128)
reserved1_min_value(::TensorMessage) = Int8(-127)
reserved1_max_value(::TensorMessage) = Int8(127)
reserved1_encoding_length(::TensorMessage) = 2
reserved1_length(::TensorMessage) = 2
reserved1_eltype(::TensorMessage) = Int8

@inline function reserved1(m::TensorMessage)
    return @inbounds mappedarray(ltoh, htol, reinterpret(Int8, view(m.buffer, m.offset+66+1:m.offset+66+sizeof(Int8)*2)))
end

@inline function reserved1_static(m::TensorMessage)
    return @inbounds mappedarray(ltoh, reinterpret(SVector{2,Int8}, view(m.buffer, m.offset+66+1:m.offset+66+sizeof(Int8)*2))[])
end

@inline function reserved1!(m::TensorMessage, value)
    copyto!(mappedarray(ltoh, htol, reinterpret(Int8, view(m.buffer, m.offset+66+1:m.offset+66+sizeof(Int8)*2))), value)
end

function shape_meta_attribute(::TensorMessage, meta_attribute)
    meta_attribute === :semantic_type && return Symbol("int32")
    meta_attribute === :presence && return Symbol("required")
    error(lazy"unknown attribute: $meta_attribute")
end

shape_character_encoding(::TensorMessage) = "null"
shape_in_acting_version(m::TensorMessage) = sbe_acting_version(m) >= 0
shape_id(::TensorMessage) = 20
shape_header_length(::TensorMessage) = 4

@inline function shape_length(m::TensorMessage)
    return decode_le(UInt32, m.buffer, sbe_position(m))
end

@inline function shape_length!(m::TensorMessage, n)
    if !checkbounds(Bool, m.buffer, sbe_position(m) + 1 + 4 + n)
        error("buffer too short for data length")
    end
    return encode_le(UInt32, m.buffer, sbe_position(m), n)
end

@inline function skip_shape!(m::TensorMessage)
    len = shape_length(m)
    pos = sbe_position(m) + len + 4
    sbe_position!(m, pos)
    return len
end

@inline function shape(m::TensorMessage)
    len = shape_length(m)
    pos = sbe_position(m) + 4
    sbe_position!(m, pos + len)
    return @inbounds view(m.buffer, pos+1:pos+len)
end

@inline function shape!(m::TensorMessage, len::Int)
    shape_length!(m, len)
    pos = sbe_position(m) + 4
    sbe_position!(m, pos + len)
    return @inbounds view(m.buffer, pos+1:pos+len)
end

function offset_meta_attribute(::TensorMessage, meta_attribute)
    meta_attribute === :semantic_type && return Symbol("int32")
    meta_attribute === :presence && return Symbol("required")
    error(lazy"unknown attribute: $meta_attribute")
end

offset_character_encoding(::TensorMessage) = "null"
offset_in_acting_version(m::TensorMessage) = sbe_acting_version(m) >= 0
offset_id(::TensorMessage) = 21
offset_header_length(::TensorMessage) = 4

@inline function offset_length(m::TensorMessage)
    return decode_le(UInt32, m.buffer, sbe_position(m))
end

@inline function offset_length!(m::TensorMessage, n)
    if !checkbounds(Bool, m.buffer, sbe_position(m) + 1 + 4 + n)
        error("buffer too short for data length")
    end
    return encode_le(UInt32, m.buffer, sbe_position(m), n)
end

@inline function skip_offset!(m::TensorMessage)
    len = offset_length(m)
    pos = sbe_position(m) + len + 4
    sbe_position!(m, pos)
    return len
end

@inline function offset(m::TensorMessage)
    len = offset_length(m)
    pos = sbe_position(m) + 4
    sbe_position!(m, pos + len)
    return @inbounds view(m.buffer, pos+1:pos+len)
end

@inline function offset!(m::TensorMessage, len::Int)
    offset_length!(m, len)
    pos = sbe_position(m) + 4
    sbe_position!(m, pos + len)
    return @inbounds view(m.buffer, pos+1:pos+len)
end

function values_meta_attribute(::TensorMessage, meta_attribute)
    meta_attribute === :presence && return Symbol("required")
    error(lazy"unknown attribute: $meta_attribute")
end

values_character_encoding(::TensorMessage) = "null"
values_in_acting_version(m::TensorMessage) = sbe_acting_version(m) >= 0
values_id(::TensorMessage) = 30
values_header_length(::TensorMessage) = 4

@inline function values_length(m::TensorMessage)
    return decode_le(UInt32, m.buffer, sbe_position(m))
end

@inline function values_length!(m::TensorMessage, n)
    if !checkbounds(Bool, m.buffer, sbe_position(m) + 1 + 4 + n)
        error("buffer too short for data length")
    end
    return encode_le(UInt32, m.buffer, sbe_position(m), n)
end

@inline function skip_values!(m::TensorMessage)
    len = values_length(m)
    pos = sbe_position(m) + len + 4
    sbe_position!(m, pos)
    return len
end

@inline function values(m::TensorMessage)
    len = values_length(m)
    pos = sbe_position(m) + 4
    sbe_position!(m, pos + len)
    return @inbounds view(m.buffer, pos+1:pos+len)
end

@inline function values!(m::TensorMessage, len::Int)
    values_length!(m, len)
    pos = sbe_position(m) + 4
    sbe_position!(m, pos + len)
    return @inbounds view(m.buffer, pos+1:pos+len)
end

function print_fields(io::IO, writer::TensorMessage{T}) where {T}
    println(io, "TensorMessage view over a type $T")
    println(io, "SbeBlockLength: ", sbe_block_length(writer))
    println(io, "SbeTemplateId:  ", sbe_template_id(writer))
    println(io, "SbeSchemaId:    ", sbe_schema_id(writer))
    println(io, "SbeSchemaVersion: ", sbe_schema_version(writer))

    sbe_rewind!(writer)
    print(io, "header: ")
    print_fields(io, header(writer))

    println(io)
    print(io, "format: ")
    print(io, format(writer))

    println(io)
    print(io, "order: ")
    print(io, order(writer))

    println(io)
    print(io, "reserved1: ")
    print(io, reserved1(writer))

    println(io)
    print(io, "shape: ")
    print(io, skip_shape!(writer))
    print(io, " bytes of raw data")

    println(io)
    print(io, "offset: ")
    print(io, skip_offset!(writer))
    print(io, " bytes of raw data")

    println(io)
    print(io, "values: ")
    print(io, skip_values!(writer))
    print(io, " bytes of raw data")

    sbe_rewind!(writer)
    nothing
end

@inline function skip!(m::TensorMessage)
    skip_shape!(m)
    skip_offset!(m)
    skip_values!(m)
    return
end
